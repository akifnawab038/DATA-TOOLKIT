# -*- coding: utf-8 -*-
"""ASSIGNMENT DATA TOOLKIT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16r_UA37DKzPgzFLcoxBKOmcoes9IBsNU

# ASSSIGNMENT:
# Data Visralization

## MATPLOTLIB ASSIGNMENT:

**1. Create a scatter plot using Matplotlib to visualize the relationship between two arrays, x and y for the given data.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [2, 4, 5, 7, 6, 8, 9, 10, 12, 13]
plt.scatter(x, y)
plt.title("Scatter Plot")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.show()

"""**2. Generate a line plot to visualize the trend of values for the given data.**"""

data = np.array([3, 7, 9, 15, 22, 29, 35])
plt.plot(data)
plt.title("Line Plot")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.show()

"""**3. Display a bar chart to represent the frequency of each item in the given array categories.**"""

categories = ['A', 'B', 'C', 'D', 'E']
values = [25, 40, 30, 35, 20]
plt.bar(categories, values)
plt.title("Bar Chart")
plt.xlabel("Categories")
plt.ylabel("Values")
plt.show()

"""**4. Create a histogram to visualize the distribution of values in the array data.**"""

data = np.random.normal(0, 1, 1000)
plt.hist(data)
plt.title("Histogram")
plt.xlabel("Values")
plt.ylabel("Frequency")
plt.show()

"""**5. Show a pie chart to represent the percentage distribution of different sections in the array `sections`.**"""

sections = ['Section A', 'Section B', 'Section C', 'Section D']
sizes = [25, 30, 15, 30]
plt.pie(sizes, labels=sections, autopct='%1.1f%%')
plt.title("Pie Chart")
plt.show()



"""# SEABORN ASSIGNMENT:

**1. Create a scatter plot to visualize the relationship between two variables, by generating a synthetic
dataset.**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

tips = sns.load_dataset('tips')
tips

sns.scatterplot(x='total_bill', y='tip', data=tips)

"""**2. Generate a dataset of random numbers. Visualize the distribution of a numerical variable.**"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

np.random.seed(0)
data = np.random.normal(loc=50, scale=10, size=1000)

df = pd.DataFrame(data, columns=['Random Numbers'])

plt.figure(figsize=(10, 6))
sns.histplot(df['Random Numbers'], kde=True)
plt.title('Distribution of Random Numbers')
plt.xlabel('Random Numbers')
plt.ylabel('Frequency')
plt.show()

"""**3. Create a dataset representing categories and their corresponding values. Compare different categories
based on numerical values**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'Category': ['Category A', 'Category B', 'Category C', 'Category D', 'Category E'],
    'Value': [23, 45, 15, 67, 33]
}

df = pd.DataFrame(data)

plt.figure(figsize=(10, 6))
sns.barplot(x='Category', y='Value', data=df, palette='viridis')
plt.title('Comparison of Categories Based on Values')
plt.xlabel('Category')
plt.ylabel('Value')
plt.show()

"""**4. Generate a dataset with categories and numerical values. Visualize the distribution of a numerical
variable across different categories**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

np.random.seed(0)
data = {
    'Category': np.repeat(['A', 'B', 'C', 'D'], 50),
    'Value': np.random.normal(50, 15, 200)
}

df = pd.DataFrame(data)

plt.figure(figsize=(8, 5))
sns.boxplot(x='Category', y='Value', data=df)
plt.title('Distribution of Values Across Categories')
plt.show()

"""**5. Generate a synthetic dataset with correlated features. Visualize the correlation matrix of a dataset using a
heatmap.**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

np.random.seed(0)
size = 100
feature1 = np.random.normal(50, 10, size)
feature2 = feature1 + np.random.normal(0, 5, size)
feature3 = 2 * feature1 - feature2 + np.random.normal(0, 3, size)
df = pd.DataFrame({
    'Feature 1': feature1,
    'Feature 2': feature2,
    'Feature 3': feature3
})

corr_matrix = df.corr()

plt.figure(figsize=(6, 4))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix Heatmap')
plt.show()



"""# PLOTLY ASSIGNMENT:

**1. Using the given dataset, to generate a 3D scatter plot to visualize the distribution of data points in a threedimensional space.**
"""

import numpy as np
import pandas as pd
import plotly.express as px

np.random.seed(30)
data = {
    'X': np.random.uniform(-10, 10, 300),
    'Y': np.random.uniform(-10, 10, 300),
    'Z': np.random.uniform(-10, 10, 300)
}
df = pd.DataFrame(data)

fig = px.scatter_3d(df, x='X', y='Y', z='Z', title='3D Scatter Plot of Random Data Points')
fig.show()

"""**2. Using the Student Grades, create a violin plot to display the distribution of scores across different grade
categories.**
"""

import numpy as np
import pandas as pd
import plotly.express as px

# Generate the student grades dataset
np.random.seed(15)
data_grades = {
    'Grade': np.random.choice(['A', 'B', 'C', 'D', 'F'], 200),
    'Score': np.random.randint(50, 100, 200)
}
df_grades = pd.DataFrame(data_grades)

# Create a violin plot
fig_grades = px.violin(df_grades, y='Score', x='Grade', box=True, points='all',
                       title='Distribution of Scores Across Different Grade Categories')
fig_grades.show()

"""**3. Using the sales data, generate a heatmap to visualize the variation in sales across different months and
days.**
"""

import numpy as np
import pandas as pd
import plotly.express as px

np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)

pivot_table = df.pivot_table(values='Sales', index='Day', columns='Month', aggfunc='sum', fill_value=0)

fig = px.imshow(pivot_table,
                title='Sales Variation Across Different Months and Days',
                labels=dict(x='Month', y='Day', color='Sales'),
                x=pivot_table.columns,
                y=pivot_table.index)

fig.show()

"""**4. Using the given x and y data, generate a 3D surface plot to visualize the function**"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go

x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x**2 + y**2))

data = {
    'X': x.flatten(),
    'Y': y.flatten(),
    'Z': z.flatten()
}
df = pd.DataFrame(data)

fig = go.Figure(data=[go.Surface(z=z, x=x.flatten(), y=y.flatten())])
fig.update_layout(title='3D Surface Plot of z = sin(sqrt(x^2 + y^2))',
                  scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Z'))

fig.show()

"""**5. Using the given dataset, create a bubble chart to represent each country's population (y-axis), GDP (xaxis), and bubble size proportional to the population.**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

np.random.seed(25)

data = {
    'Country': ['USA', 'Canada', 'UK', 'Germany', 'France'],
    'Population': np.random.randint(100, 1000, 5),
    'GDP': np.random.randint(500, 2000, 5)
}
df = pd.DataFrame(data)

plt.figure(figsize=(10, 6))
plt.scatter(df['GDP'], df['Population'], s=df['Population']*10, alpha=0.5, c='blue', edgecolors='w', linewidth=0.5)

for i, row in df.iterrows():
    plt.text(row['GDP'], row['Population'], row['Country'], ha='center', va='center', fontsize=10)

plt.xlabel('GDP')
plt.ylabel('Population')
plt.title('Country Population vs. GDP (Bubble Size ‚àù Population)')
plt.show()

"""# BOKEH ASSIGNMENT:

**1.Create a Bokeh plot displaying a sine wave. Set x-values from 0 to 10 and y-values as the sine of x.**
"""

import numpy as np
from bokeh.plotting import figure, show, output_notebook

output_notebook()

x = np.linspace(0, 10, 100)
y = np.sin(x)

p = figure(title="Sine Wave", x_axis_label="x", y_axis_label="sin(x)")

p.line(x, y, legend_label="sin(x)", line_width=2, color="blue")

show(p)

"""**2.Create a Bokeh scatter plot using randomly generated x and y values. Use different sizes and colors for the
markers based on the 'sizes' and 'colors' columns**
"""

import numpy as np
from bokeh.plotting import figure, show, output_notebook
from bokeh.models import ColumnDataSource
from bokeh.transform import linear_cmap
from bokeh.palettes import Viridis256

output_notebook()

np.random.seed(42)
x = np.random.rand(50) * 100
y = np.random.rand(50) * 100
sizes = np.random.rand(50) * 50
colors = np.random.rand(50) * 100

source = ColumnDataSource(data=dict(x=x, y=y, sizes=sizes, colors=colors))

color_mapper = linear_cmap(field_name='colors', palette=Viridis256, low=min(colors), high=max(colors))

p = figure(title="Random Scatter Plot with Sizes and Colors", x_axis_label='X', y_axis_label='Y')
p.scatter('x', 'y', size='sizes', color=color_mapper, source=source, alpha=0.6, legend_label="Data Points")

show(p)

"""**3. Generate a Bokeh bar chart representing the counts of different fruits using the following dataset.**"""

from bokeh.plotting import figure, show, output_notebook

output_notebook()

fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']
counts = [20, 25, 30, 35]

p = figure(x_range=fruits, title="Fruit Counts",
           x_axis_label='Fruits', y_axis_label='Counts',
           height=400, width=600)
p.vbar(x=fruits, top=counts, width=0.9, color="blue", legend_label="Counts")

show(p)

"""**4. Create a Bokeh histogram to visualize the distribution of the given data.**"""

import numpy as np
from bokeh.plotting import figure, show, output_notebook

output_notebook()

data_hist = np.random.randn(1000)

hist, edges = np.histogram(data_hist, bins=30)

p = figure(title="Histogram of Random Data",
           x_axis_label='Value',
           y_axis_label='Frequency',
           height=400,
           width=600)

p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:], fill_color="navy", line_color="white", alpha=0.5)

show(p)

"""**5. Create a Bokeh heatmap using the provided dataset.**"""

import numpy as np
from bokeh.plotting import figure, show, output_notebook
from bokeh.transform import linear_cmap
from bokeh.models import ColorBar, ColumnDataSource
from bokeh.palettes import Viridis256

output_notebook()

data_heatmap = np.random.rand(10, 10)
x = np.linspace(0, 1, 10)
y = np.linspace(0, 1, 10)

xx, yy = np.meshgrid(x, y)

values = data_heatmap.flatten()
x_coords = xx.flatten()
y_coords = yy.flatten()

source = ColumnDataSource(data=dict(values=values, x=x_coords, y=y_coords))

mapper = linear_cmap(field_name='values', palette=Viridis256, low=0, high=1)

p = figure(title="Heatmap", x_axis_label='X', y_axis_label='Y',
           width=600, height=600)

p.rect(x='x', y='y', width=0.1, height=0.1, source=source,
        line_color=None, fill_color=mapper)

color_bar = ColorBar(color_mapper=mapper['transform'], width=8, location=(0, 0))
p.add_layout(color_bar, 'right')

show(p)

